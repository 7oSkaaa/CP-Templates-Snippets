{
	"Floyd": {
		"prefix": "Floyd",
		"body": [
		  "template < typename T = int > struct Floyd {",
		  "",
		  "    struct Edge {",
		  "        ",
		  "        ll u, v, w;",
		  "        ",
		  "        Edge(int U = 0, int V = 0, int W = 0){",
		  "            u = U, v = V, w = W;",
		  "        }",
		  "",
		  "        bool operator < (const Edge& e) const {",
		  "            return w < e.w;",
		  "        }",
		  "",
		  "    };",
		  "",
		  "    int n, m;",
		  "    vector < vector < T > > dist;",
		  "    vector < Edge > edges;",
		  "    T DEFAULT;",
		  "",
		  "    Floyd(int N, int M){",
		  "        n = N, m = M, DEFAULT = 1e18;",
		  "        dist.assign(n + 10, vector < T > (n + 10, DEFAULT));",
		  "        edges.resize(m);",
		  "    }",
		  "",
		  "    T operation(T a, T b, T c){",
		  "        return min(a, b + c);",
		  "    }",
		  "",
		  "    void Get_Data(){",
		  "        for(auto& e : edges){",
		  "            cin >> e.u >> e.v >> e.w;",
		  "            dist[e.u][e.u] = dist[e.v][e.v] = 0;",
		  "            dist[e.u][e.v] = dist[e.v][e.u] = min({dist[e.u][e.v], dist[e.v][e.u], e.w});",
		  "        }",
		  "    }",
		  "",
		  "    void Build_Dist(){",
		  "        for(int i = 1; i <= n; i++)",
		  "            for(int u = 1; u <= n; u++)",
		  "                for(int v = 1; v <= n; v++)",
		  "                    dist[u][v] = operation(dist[u][v], dist[u][i], dist[i][v]);",
		  "    }",
		  "",
		  "};"
		],
		"description": "Floyd"
	}
}