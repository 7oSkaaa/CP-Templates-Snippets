{
	"Fenwick_Tree": {
		"prefix": "Fenwick_Tree",
		"body": [
		  "template < typename T = int > struct Fenwick_Tree {",
		  "    ",
		  "    vector < T > Tree;",
		  "    int n;",
		  "    T DEFAULT;",
		  "",
		  "    Fenwick_Tree(int N){",
		  "        n = N + 1, DEFAULT = 0;",
		  "        Tree.assign(n + 10, DEFAULT);",
		  "    }",
		  "",
		  "    T operation(T a, T b){",
		  "        return a + b;",
		  "    }",
		  "",
		  "    int lowest_bit(int idx){",
		  "        return (idx & -idx);",
		  "    }",
		  "",
		  "    void build(vector < T >& nums){",
		  "        for(int i = 0; i < sz(nums); i++)",
		  "            add(i, nums[i]);",
		  "    }",
		  "",
		  "    void add(int idx, T val){",
		  "        idx++;",
		  "        while(idx <= n){",
		  "            Tree[idx] = operation(Tree[idx], val);",
		  "            idx += lowest_bit(idx);",
		  "        }",
		  "    }",
		  "",
		  "    T get_ans(int idx){",
		  "        T ans = DEFAULT;",
		  "        idx++;",
		  "        while(idx){",
		  "            ans = operation(ans, Tree[idx]);",
		  "            idx -= lowest_bit(idx);",
		  "        }",
		  "        return ans;",
		  "    }",
		  "",
		  "    T query(int l, int r){",
		  "        if(l > r) swap(l, r);",
		  "        return get_ans(r) - get_ans(l - 1);",
		  "    }",
		  "",
		  "};",
		  ""
		],
		"description": "Fenwick_Tree"
	}
}