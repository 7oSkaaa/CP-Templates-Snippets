{
	"Partial_2D": {
		"prefix": "Partial_2D",
		"body": [
		  "template < typename T = int > struct Partial_2D {",
		  "",
		  "    vector < vector < T > > partial;",
		  "    int n, m;",
		  "",
		  "    Partial_2D(int N, int M){",
		  "        n = N, m = M;",
		  "        partial.assign(n + 5, vector < T > (m + 5));",
		  "    }",
		  "",
		  "    void build_partial(int queries){",
		  "        while(queries--){",
		  "            Pair < T > p1, p2;",
		  "            cin >> p1.fi >> p1.se >> p2.fi >> p2.se;",
		  "            if(p1.fi > p2.fi) swap(p1.fi, p2.fi);",
		  "            if(p1.se > p2.se) swap(p1.se, p2.se);",
		  "            partial[p2.fi][p2.se]++, partial[p2.fi][p1.se - 1]--; ",
		  "            partial[p1.fi - 1][p2.se]--, partial[p1.fi - 1][p1.se - 1]++;",
		  "        }",
		  "        for(int i = n; i >= 0; i--)",
		  "            for(int j = m; j >= 0; j--)",
		  "                partial[i][j] += partial[i][j + 1];",
		  "        for(int i = n; i >= 0; i--)",
		  "            for(int j = m; j >= 0; j--)",
		  "                partial[i][j] += partial[i + 1][j];",
		  "    }",
		  "",
		  "    T get(int x, int y){",
		  "        return partial[x][y];",
		  "    }",
		  "",
		  "    void print(){",
		  "        for(int i = 1; i <= n; i++, cout << \"\\n\")",
		  "            for(int j = 1; j <= m && cout << partial[i][j] << \" \"; j++);",
		  "    }",
		  "",
		  "};"
		],
		"description": "Partial_2D"
	}
}